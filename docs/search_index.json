[["index.html", "R Notebook Chapter 1 Acknowledgement", " R Notebook DEA 2022-07-31 Chapter 1 Acknowledgement This is a personal notebook open for public use. I have collected these notes, codes and best practices that I find useful to remind myself on R programming language. All these content are free to use and share. "],["r-programming.html", "Chapter 2 R Programming 2.1 General Information 2.2 Create Data 2.3 Create a Data Frame", " Chapter 2 R Programming R is a functional programming language. It is most popular among academia and Data Scientists. 2.1 General Information 2.1.1 Cleaning the environment rm(list = ls()) 2.1.2 Installing a package # install install.packages(&quot;ggplot2&quot;) # removing the library detach(ggplot2, unload = TRUE) 2.1.3 Browsing help on packages browseVignettes(&quot;ggplot2&quot;) 2.1.4 Directories Get working directory. Don’t worry if you already create a project and working in the project directory. I can assign the path to an object. wd &lt;- getwd() wd Listing environment objects ls() I can list files in the working directory and assign it to an object files &lt;- list.files() head(files) Alternative way to list files in the working directory files2 &lt;- dir() head(files2) 2.1.5 List specific files Let’s check the arguments of dir function. args(dir) dir(pattern = &quot;^R_&quot;, full.names = F, ignore.case = T ) Create a new folder in the WD old.dir &lt;- getwd() dir.create(&quot;testdir&quot;) 2.1.6 Working Directory As warning shows, this is not the best way to change WD in code chunk. Changing in the global options is a better way, unless you work in a project folder. setwd(&quot;testdir&quot;) 2.1.7 Create a new file file.create(&quot;testdir/mytest.R&quot;) ## [1] TRUE Check if a file exits. Interactive file.exists(&quot;testdir/mytest.R&quot;) ### Sample usage if(!file.exists(&quot;testdir/mytest.R&quot;)){ print(&quot;File not exist!&quot;) } else { &quot;File exists!&quot;} 2.1.8 Show file info file.info(&quot;testdir/mytest.R&quot;) ## size isdir mode mtime ctime ## testdir/mytest.R 0 FALSE 644 2022-07-31 00:33:48 2022-07-31 00:33:48 ## atime uid gid uname grname ## testdir/mytest.R 2022-07-31 00:32:35 501 20 deayan staff 2.1.9 Listing files in a directory args(list.files) ## function (path = &quot;.&quot;, pattern = NULL, all.files = FALSE, full.names = FALSE, ## recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, ## no.. = FALSE) ## NULL Let’s list all the files that their names starts with “my” myfiles &lt;- list.files(path=&quot;testdir&quot;, pattern = &quot;^my&quot;) ### print the second file in myfiles myfiles[2] ## [1] &quot;mytest10.R&quot; 2.1.10 renaming a file args(file.rename) ## function (from, to) ## NULL file.rename(&quot;testdir/mytest.R&quot;, &quot;testdir/mytest10.R&quot;) 2.1.11 copy a file from and to file.copy(&quot;testdir/mytest2.R&quot;, &quot;testdir/mytest3.R&quot;) 2.1.12 file path Assign a name to a file path (It does not matter if file exists or not) path1 &lt;- file.path(to = &quot;new/mytest3.R&quot;) path1 Alternative way to assign name to a file path abc &lt;- file.path(from=&quot;new2&quot;, to=&quot;mytest3.R&quot;) abc Create a directory: testdir/new dir.create(file.path(&quot;testdir&quot;, &quot;new&quot;), recursive = TRUE ) 2.1.13 Show arguments of a function str(file.path) args((file.path)) 2.1.14 this needs more context and examples Change the search path so that you can use variable names directly But this is not a practical way. attach(mtcars) detach(mtcars) Best alternative is to use with() function 2.2 Create Data 2.2.1 Create sequence of numbers a &lt;- seq(from = 5, to = 14, by = 2) a ## [1] 5 7 9 11 13 seq(10, 20) ## default increment is 1 ## [1] 10 11 12 13 14 15 16 17 18 19 20 seq(10, 30, by =2) ## [1] 10 12 14 16 18 20 22 24 26 28 30 take the length from the length of this argument. So, this will create a sequence starting from 1 to 100 with length = 10 seq(1, 100, along.with = 1:4) ## [1] 1 34 67 100 desired length of the sequence. seq(1, 100, length.out = 4) ## [1] 1 34 67 100 2.2.2 short cuts This will create a sequence starting from 1 with length equal to the length of the argument. seq_along(1:10) ## [1] 1 2 3 4 5 6 7 8 9 10 This will create a sequence starting from 1 with length equal to the argument. seq_len(20) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2.2.3 %in% statement This creates a logical vector, where testing each element in vector “a” if ever matches any element in vector “b” ## lets create a sequence a = seq_len(10) ## test which elements of a is included in the list a %in% c(2, 4, 6, 8, 0) ## [1] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE FALSE print the elements of list a that is included in the given list a[a %in% c(2, 4, 6, 8, 0)] ## [1] 2 4 6 8 We can negate this logical statement # sub-setting property a[ ! (a %in% c(2, 4, 6, 8, 0))] ## [1] 1 3 5 7 9 10 2.2.4 which() function which(x, arr.ind = FALSE, useNames = TRUE) x: input is a logical statement vector returns location index of true values Here, which function returns indices of list a that the element is greater than 3 which(a &gt; 3) ## [1] 4 5 6 7 8 9 10 Let’s define two character vectors. d &lt;- LETTERS[1:10] d ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; e &lt;- LETTERS[7:10] e ## [1] &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; This shows whether an element of vector d any matches an element of vector e d %in% e ## [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE And here are the locations of TRUE values of vector d (matches vector e) which(d %in% e) ## [1] 7 8 9 10 array1 = 1:12 which( array1 %% 2 == 0, arr.ind = F) ## location in the array (1:12) ## [1] 2 4 6 8 10 12 2.2.5 Where is the min, max, first true/false? which.min() which.max() # Here is the list a = c(2, 4, 1, 7, 9, 1, 3, 5, 9, NA, &quot;4&quot;) ## print the location of the min element which.min(a) ## [1] 3 ## print the min element itself a[which.min(a)] ## [1] &quot;1&quot; ## print the location of the min element which.max(a) ## [1] 5 ## print the min element itself a[which.max(a)] ## [1] &quot;9&quot; If the input is a logical vector, max will indicate first TRUE, and min will indicate first FALSE. which.max(a &gt; 3) ## the second element ## [1] 2 ## print the second element a[which.max(a &gt; 3)] ## [1] &quot;4&quot; 2.2.6 match(a, b) function match: An integer vector giving the position in table of the first match if there is a match, otherwise nomatch. a = 1:15 b = seq(1, 20, by=3) match(a, b) ## returns location of true values of vector a ## [1] 1 NA NA 2 NA NA 3 NA NA 4 NA NA 5 NA NA a %in% b ## [1] TRUE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE ## [13] TRUE FALSE FALSE 2.3 Create a Data Frame There are multiple options and tools here. data frame tibble data table df &lt;- cars head(df) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 # test if value 5 in speed column 5 %in% df$speed ## [1] FALSE # create a dataframe df2 &lt;- data.frame(Type = c(&quot;fruit&quot;, &quot;fruit&quot;,&quot;fruit&quot;, &quot;veggie&quot;,&quot;veggie&quot;), Name = c(&quot;red apple&quot;, &quot;green apple&quot;, &quot;red apple&quot;, &quot;green apple&quot; ,&quot;red apple&quot;), Color = c(NA, &quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;)) df2 ## Type Name Color ## 1 fruit red apple &lt;NA&gt; ## 2 fruit green apple red ## 3 fruit red apple blue ## 4 veggie green apple yellow ## 5 veggie red apple red df2 &lt;- within(df2, { newcol = &quot;No&quot; newcol[Type %in% c(&quot;fruit&quot;)] = &quot;No&quot; newcol[Name %in% c( &quot;green apple&quot;)] = &quot;Yes&quot; }) head(df2, 3) ## Type Name Color newcol ## 1 fruit red apple &lt;NA&gt; No ## 2 fruit green apple red Yes ## 3 fruit red apple blue No subsetting library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union df3 &lt;- c(&quot;home&quot;, &quot;veggie&quot;, &quot;fruit&quot;) df2 %&gt;% filter(df2$Type %in% df3) ## Type Name Color newcol ## 1 fruit red apple &lt;NA&gt; No ## 2 fruit green apple red Yes ## 3 fruit red apple blue No ## 4 veggie green apple yellow Yes ## 5 veggie red apple red &lt;NA&gt; dropping columns df2[, !(colnames(df2) %in% c(&quot;Name&quot;, &quot;Color&quot;)) ] ## Type newcol ## 1 fruit No ## 2 fruit Yes ## 3 fruit No ## 4 veggie Yes ## 5 veggie &lt;NA&gt; selecting columns df2[, (colnames(df2) %in% c(&quot;Name&quot;, &quot;Color&quot;)) ] ## Name Color ## 1 red apple &lt;NA&gt; ## 2 green apple red ## 3 red apple blue ## 4 green apple yellow ## 5 red apple red creating custom operator `%notin%` &lt;- Negate(`%in%`) numbs &lt;- rep(seq(3), 4) numbs ## [1] 1 2 3 1 2 3 1 2 3 1 2 3 4 %notin% numbs ## [1] TRUE "],["logic-statements.html", "Chapter 3 Logic statements", " Chapter 3 Logic statements TRUE vs FALSE TRUE == TRUE ## [1] TRUE (FALSE == TRUE) == FALSE ## [1] TRUE 6==7 ## [1] FALSE 6&lt;=6 ## [1] TRUE 4 != 5 ## [1] TRUE !(5 == 71) ## [1] TRUE TRUE &amp; TRUE ## [1] TRUE FALSE &amp; FALSE ## [1] FALSE TRUE &amp; c(TRUE, FALSE, FALSE) ## [1] TRUE FALSE FALSE equivalent statement as c(TRUE, TRUE, TRUE) &amp; c(TRUE, FALSE, FALSE) ## [1] TRUE FALSE FALSE "],["be-careful.html", "Chapter 4 be careful 4.1 matrices and data frames", " Chapter 4 be careful TRUE &amp;&amp; c(TRUE, FALSE, FALSE) ## [1] TRUE In this case, the left operand is only evaluated with the first member of the right operand (the vector). The rest of the elements in the vector aren’t evaluated at all in this expression. TRUE | FALSE ## [1] TRUE TRUE | c(TRUE, FALSE, FALSE) ## [1] TRUE TRUE TRUE TRUE || c(TRUE, FALSE, FALSE) ## [1] TRUE FALSE &amp;&amp; 6 &gt;= 6 || 7 &gt;= 8 || 50 &lt;= 49.5 ## [1] FALSE !(8 &gt; 4) || 5 == 5.0 &amp;&amp; 7.8 &gt;= 7.79 ## [1] TRUE TRUE &amp;&amp; FALSE || 9 &gt;= 4 &amp;&amp; 3 &lt; 6 ## [1] TRUE 99.99 &gt; 100 || 45 &lt; 7.3 || 4 != 4.0 ## [1] FALSE isTRUE(6&gt;4) ## [1] TRUE identical(&#39;twins&#39;, &#39;twins&#39;) ## [1] TRUE The xor() function stands for exclusive OR. If one argument evaluates to TRUE and one argument evaluates to FALSE, then this function will return TRUE, otherwise it will return FALSE. xor(5 == 6, !FALSE) ## [1] TRUE xor(T, T) ## [1] FALSE xor(F, F) ## [1] FALSE xor(identical(xor, &#39;xor&#39;), 7 == 7.0) ## [1] TRUE xor(4 &gt;= 9, 8 != 8.0) ## [1] FALSE ints &lt;- sample(10) ints &gt; 5 ## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE The which() function takes a logical vector as an argument and returns the indices of the vector that are TRUE. which(c(TRUE, FALSE, TRUE)) ## [1] 1 3 x &lt;- ints&gt;7 which(x) ## [1] 1 5 7 The any() function will return TRUE if one or more of the elements in the logical vector is TRUE. any(ints&lt;0) ## [1] FALSE The all() function will return TRUE if every element in the logical vector is TRUE. all(ints&gt;0) ## [1] TRUE any(ints == 10) ## [1] TRUE all(c(TRUE, FALSE, TRUE)) ## [1] FALSE 4.1 matrices and data frames "],["vectors-contain-one-class-of-data.html", "Chapter 5 Vectors contain one class of data", " Chapter 5 Vectors contain one class of data num1 &lt;- 1:20 num1 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 dim(num1) ## NULL length(num1) ## [1] 20 "],["convert-vector-to-a-matrix.html", "Chapter 6 Convert vector to a Matrix", " Chapter 6 Convert vector to a Matrix dim(num1) &lt;- c(4, 5) attributes(num1) ## $dim ## [1] 4 5 num1 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 5 9 13 17 ## [2,] 2 6 10 14 18 ## [3,] 3 7 11 15 19 ## [4,] 4 8 12 16 20 class(num1) ## [1] &quot;matrix&quot; &quot;array&quot; my_matrix &lt;- num1 "],["creating-a-matrix.html", "Chapter 7 Creating a Matrix", " Chapter 7 Creating a Matrix my_matrix2 &lt;- matrix(data=1:20, nrow=4, ncol=5) identical(my_matrix, my_matrix2) ## [1] TRUE "],["create-a-character-vector.html", "Chapter 8 Create a character vector", " Chapter 8 Create a character vector patients &lt;- c(&quot;Bill&quot;, &quot;Gina&quot;, &quot;Kelly&quot;, &quot;Sean&quot;) "],["column-bind.html", "Chapter 9 column bind", " Chapter 9 column bind alt &lt;- cbind(patients, my_matrix) alt ## patients ## [1,] &quot;Bill&quot; &quot;1&quot; &quot;5&quot; &quot;9&quot; &quot;13&quot; &quot;17&quot; ## [2,] &quot;Gina&quot; &quot;2&quot; &quot;6&quot; &quot;10&quot; &quot;14&quot; &quot;18&quot; ## [3,] &quot;Kelly&quot; &quot;3&quot; &quot;7&quot; &quot;11&quot; &quot;15&quot; &quot;19&quot; ## [4,] &quot;Sean&quot; &quot;4&quot; &quot;8&quot; &quot;12&quot; &quot;16&quot; &quot;20&quot; "],["r-recycles-if-columns-are-not-equal.html", "Chapter 10 R recycles if columns are not equal", " Chapter 10 R recycles if columns are not equal num2 &lt;- 1:10 alt2 &lt;- cbind(patients, num2) ## Warning in cbind(patients, num2): number of rows of result is not a multiple of ## vector length (arg 1) alt2 ## patients num2 ## [1,] &quot;Bill&quot; &quot;1&quot; ## [2,] &quot;Gina&quot; &quot;2&quot; ## [3,] &quot;Kelly&quot; &quot;3&quot; ## [4,] &quot;Sean&quot; &quot;4&quot; ## [5,] &quot;Bill&quot; &quot;5&quot; ## [6,] &quot;Gina&quot; &quot;6&quot; ## [7,] &quot;Kelly&quot; &quot;7&quot; ## [8,] &quot;Sean&quot; &quot;8&quot; ## [9,] &quot;Bill&quot; &quot;9&quot; ## [10,] &quot;Gina&quot; &quot;10&quot; df &lt;- data.frame(patients, my_matrix) df ## patients X1 X2 X3 X4 X5 ## 1 Bill 1 5 9 13 17 ## 2 Gina 2 6 10 14 18 ## 3 Kelly 3 7 11 15 19 ## 4 Sean 4 8 12 16 20 class(df) ## [1] &quot;data.frame&quot; "],["create-and-variable-names.html", "Chapter 11 Create and ; variable names", " Chapter 11 Create and ; variable names cnames &lt;- c(&quot;patient&quot;, &quot;age&quot;, &quot;weight&quot;, &quot;bp&quot;, &quot;rating&quot;, &quot;test&quot;) "],["assign-column-names.html", "Chapter 12 assign column names", " Chapter 12 assign column names colnames(df) &lt;- cnames names(df) ## [1] &quot;patient&quot; &quot;age&quot; &quot;weight&quot; &quot;bp&quot; &quot;rating&quot; &quot;test&quot; names(df) &lt;- toupper(names(df)) names(df) ## [1] &quot;PATIENT&quot; &quot;AGE&quot; &quot;WEIGHT&quot; &quot;BP&quot; &quot;RATING&quot; &quot;TEST&quot; names(df) &lt;- tolower(names(df)) names(df) ## [1] &quot;patient&quot; &quot;age&quot; &quot;weight&quot; &quot;bp&quot; &quot;rating&quot; &quot;test&quot; "],["reorder-the-variable-names.html", "Chapter 13 reorder the variable names", " Chapter 13 reorder the variable names df &lt;- df[ , c(6:1)] names(df) ## [1] &quot;test&quot; &quot;rating&quot; &quot;bp&quot; &quot;weight&quot; &quot;age&quot; &quot;patient&quot; colnames(df) ## [1] &quot;test&quot; &quot;rating&quot; &quot;bp&quot; &quot;weight&quot; &quot;age&quot; &quot;patient&quot; "],["reordering-columns.html", "Chapter 14 Reordering columns", " Chapter 14 Reordering columns df &lt;- df[ , c( &quot;age&quot;, &quot;test&quot;, &quot;weight&quot;, &quot;bp&quot;, &quot;patient&quot;, &quot;rating&quot;)] names(df) ## [1] &quot;age&quot; &quot;test&quot; &quot;weight&quot; &quot;bp&quot; &quot;patient&quot; &quot;rating&quot; "],["adding-a-new-column.html", "Chapter 15 Adding a new column", " Chapter 15 Adding a new column df$newcol &lt;- as.Date(&quot;2020-05-20&quot;) df$newcol[1] ## [1] &quot;2020-05-20&quot; version ## _ ## platform aarch64-apple-darwin20 ## arch aarch64 ## os darwin20 ## system aarch64, darwin20 ## status ## major 4 ## minor 1.3 ## year 2022 ## month 03 ## day 10 ## svn rev 81868 ## language R ## version.string R version 4.1.3 (2022-03-10) ## nickname One Push-Up sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] dplyr_1.0.8 ## ## loaded via a namespace (and not attached): ## [1] rstudioapi_0.13 knitr_1.39 magrittr_2.0.3 tidyselect_1.1.2 ## [5] R6_2.5.1 rlang_1.0.2 fastmap_1.1.0 fansi_1.0.2 ## [9] stringr_1.4.0 tools_4.1.3 xfun_0.31 utf8_1.2.2 ## [13] DBI_1.1.2 cli_3.3.0 jquerylib_0.1.4 htmltools_0.5.2 ## [17] ellipsis_0.3.2 assertthat_0.2.1 yaml_2.3.5 digest_0.6.29 ## [21] tibble_3.1.6 lifecycle_1.0.1 crayon_1.5.0 bookdown_0.27.1 ## [25] purrr_0.3.4 sass_0.4.1 vctrs_0.3.8 glue_1.6.2 ## [29] evaluate_0.15 rmarkdown_2.14 stringi_1.7.6 compiler_4.1.3 ## [33] bslib_0.3.1 pillar_1.7.0 generics_0.1.2 jsonlite_1.8.0 ## [37] pkgconfig_2.0.3 "],["operators.html", "Chapter 16 operators", " Chapter 16 operators +, -,   exponentiation: ^ (**) modulo operator: %% returns the remainder of a division "],["categorical-variables.html", "Chapter 17 Categorical variables", " Chapter 17 Categorical variables nominal variables: represent data that are unordered colors &lt;- c(&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;) factor(colors) ## [1] green blue yellow ## Levels: blue green yellow Ordinal variables: ordered, ranked data If you dont specify, R will do alphatecially speed &lt;- c(&quot;low&quot;, &quot;high&quot;, &quot;med&quot;, &quot;med&quot;) factor(speed, ordered = TRUE) ## [1] low high med med ## Levels: high &lt; low &lt; med If you specify: speed &lt;- c(&quot;low&quot;, &quot;high&quot;, &quot;med&quot;, &quot;med&quot;) factor(speed, levels = c(&quot;low&quot;, &quot;med&quot;, &quot;high&quot;), ordered = TRUE) ## [1] low high med med ## Levels: low &lt; med &lt; high Grab a component from a list mylist = list(A = c(&quot;a, b, d&quot;), cinema = (&quot;stars&quot;), size = c(1, 2, 3, 4, 4)) Three ways to select a column mylist[[2]] ## [1] &quot;stars&quot; mylist[[&quot;cinema&quot;]] ## [1] &quot;stars&quot; mylist$cinema ## [1] &quot;stars&quot; "],["logical-values.html", "Chapter 18 Logical Values", " Chapter 18 Logical Values An example x=1 ; y=3 ; z= x &gt; y print(z) class(z) ## [1] &quot;logical&quot; Standard Logical operations u=TRUE; v=FALSE u &amp; v # u and v ## [1] FALSE u | v # u or v ## [1] TRUE !u # negation ## [1] FALSE "],["integer-value.html", "Chapter 19 Integer Value", " Chapter 19 Integer Value Using integer function (making integer) y = as.integer(42.5) #forcing print(y) ## [1] 42 class(y) ## [1] &quot;integer&quot; "],["character-values.html", "Chapter 20 Character Values", " Chapter 20 Character Values A chracter object is a string value x= as.character(842) y= as.character(&quot;Davut&quot;) print(x) ## [1] &quot;842&quot; print(y) ## [1] &quot;Davut&quot; class(x) # print class of x ## [1] &quot;character&quot; class(y) ## [1] &quot;character&quot; Concatenate two characters firstname=&quot;Davut&quot;; lastname=&quot;Ayan&quot; paste(firstname, lastname) # concatenate ## [1] &quot;Davut Ayan&quot; Create a readable string sprintf(&quot;%s has %d dollars&quot;, &quot;Davut&quot;, 5000) ## [1] &quot;Davut has 5000 dollars&quot; Extract a substring substr(&quot;Davut is a crazy person&quot;, start=2, stop = 5) ## [1] &quot;avut&quot; vectors "],["basics.html", "Chapter 21 Basics", " Chapter 21 Basics creating a vector (numeric, string, logical) x=c(1,4,TRUE, &quot;deneme&quot;) print(x) ## [1] &quot;1&quot; &quot;4&quot; &quot;TRUE&quot; &quot;deneme&quot; length(x) #number of members ## [1] 4 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
