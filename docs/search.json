[{"path":"index.html","id":"acknowledgement","chapter":"1 Acknowledgement","heading":"1 Acknowledgement","text":"personal notebook open public use. collected notes, codes best practices find useful remind R programming language.content free use share.","code":""},{"path":"r-programming.html","id":"r-programming","chapter":"2 R Programming","heading":"2 R Programming","text":"R functional programming language. popular among academia Data Scientists.","code":""},{"path":"r-programming.html","id":"general-information","chapter":"2 R Programming","heading":"2.1 General Information","text":"","code":""},{"path":"r-programming.html","id":"cleaning-the-environment","chapter":"2 R Programming","heading":"2.1.1 Cleaning the environment","text":"","code":"\nrm(list = ls())"},{"path":"r-programming.html","id":"installing-a-package","chapter":"2 R Programming","heading":"2.1.2 Installing a package","text":"","code":"\n# install\ninstall.packages(\"ggplot2\")  \n\n# removing the library \ndetach(ggplot2, unload = TRUE)  "},{"path":"r-programming.html","id":"browsing-help-on-packages","chapter":"2 R Programming","heading":"2.1.3 Browsing help on packages","text":"","code":"\nbrowseVignettes(\"ggplot2\")"},{"path":"r-programming.html","id":"directories","chapter":"2 R Programming","heading":"2.1.4 Directories","text":"Get working directory. Don’t worry already create project working project directory.can assign path object.Listing environment objectsI can list files working directory assign objectAlternative way list files working directory","code":"\nwd <- getwd()\nwd\nls()\nfiles <- list.files()\nhead(files)\nfiles2 <- dir()\nhead(files2)"},{"path":"r-programming.html","id":"list-specific-files","chapter":"2 R Programming","heading":"2.1.5 List specific files","text":"Let’s check arguments dir function.Create new folder WD","code":"\nargs(dir)\ndir(pattern = \"^R_\", full.names = F, ignore.case = T )\nold.dir <- getwd()\ndir.create(\"testdir\")"},{"path":"r-programming.html","id":"working-directory","chapter":"2 R Programming","heading":"2.1.6 Working Directory","text":"warning shows, best way change WD code chunk. Changing global options better way, unless work project folder.","code":"\nsetwd(\"testdir\")"},{"path":"r-programming.html","id":"create-a-new-file","chapter":"2 R Programming","heading":"2.1.7 Create a new file","text":"Check file exits. Interactive","code":"\nfile.create(\"testdir/mytest.R\")## [1] TRUE\nfile.exists(\"testdir/mytest.R\")\n\n### Sample usage\nif(!file.exists(\"testdir/mytest.R\")){\n  print(\"File not exist!\")\n  } else {\n    \"File exists!\"}"},{"path":"r-programming.html","id":"show-file-info","chapter":"2 R Programming","heading":"2.1.8 Show file info","text":"","code":"\nfile.info(\"testdir/mytest.R\")##                  size isdir mode               mtime               ctime\n## testdir/mytest.R    0 FALSE  644 2022-07-31 00:32:34 2022-07-31 00:32:34\n##                                atime uid gid  uname grname\n## testdir/mytest.R 2022-07-31 00:23:37 501  20 deayan  staff"},{"path":"r-programming.html","id":"listing-files-in-a-directory","chapter":"2 R Programming","heading":"2.1.9 Listing files in a directory","text":"Let’s list files names starts “”","code":"\nargs(list.files)## function (path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, \n##     recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, \n##     no.. = FALSE) \n## NULL\nmyfiles <- list.files(path=\"testdir\", \n                      pattern = \"^my\")\n\n\n### print the second file in myfiles\nmyfiles[2]## [1] \"mytest10.R\""},{"path":"r-programming.html","id":"renaming-a-file","chapter":"2 R Programming","heading":"2.1.10 renaming a file","text":"","code":"\nargs(file.rename)## function (from, to) \n## NULL\nfile.rename(\"testdir/mytest.R\", \"testdir/mytest10.R\")"},{"path":"r-programming.html","id":"copy-a-file-from-and-to","chapter":"2 R Programming","heading":"2.1.11 copy a file from and to","text":"","code":"\nfile.copy(\"testdir/mytest2.R\", \"testdir/mytest3.R\")"},{"path":"r-programming.html","id":"file-path","chapter":"2 R Programming","heading":"2.1.12 file path","text":"Assign name file path (matter file exists )Alternative way assign name file pathCreate directory: testdir/new","code":"\npath1 <- file.path(to = \"new/mytest3.R\")\npath1\nabc <- file.path(from=\"new2\", to=\"mytest3.R\")\nabc\ndir.create(file.path(\"testdir\", \"new\"), recursive = TRUE )"},{"path":"r-programming.html","id":"show-arguments-of-a-function","chapter":"2 R Programming","heading":"2.1.13 Show arguments of a function","text":"","code":"\nstr(file.path)\nargs((file.path))"},{"path":"r-programming.html","id":"this-needs-more-context-and-examples","chapter":"2 R Programming","heading":"2.1.14 this needs more context and examples","text":"Change search path can use variable names directlyBut practical way.Best alternative use () function","code":"\nattach(mtcars)\ndetach(mtcars)"},{"path":"r-programming.html","id":"create-data","chapter":"2 R Programming","heading":"2.2 Create Data","text":"","code":""},{"path":"r-programming.html","id":"create-sequence-of-numbers","chapter":"2 R Programming","heading":"2.2.1 Create sequence of numbers","text":"take length length argument., create sequence starting 1 100 length = 10desired length sequence.","code":"\na <- seq(from = 5, to = 14, by = 2)\na## [1]  5  7  9 11 13\nseq(10, 20) ## default increment is 1##  [1] 10 11 12 13 14 15 16 17 18 19 20\nseq(10, 30, by =2)##  [1] 10 12 14 16 18 20 22 24 26 28 30\nseq(1, 100, along.with = 1:4)## [1]   1  34  67 100\nseq(1, 100, length.out = 4)## [1]   1  34  67 100"},{"path":"r-programming.html","id":"short-cuts","chapter":"2 R Programming","heading":"2.2.2 short cuts","text":"create sequence starting 1 length equal length argument.create sequence starting 1 length equal argument.","code":"\nseq_along(1:10)##  [1]  1  2  3  4  5  6  7  8  9 10\nseq_len(20)##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20"},{"path":"r-programming.html","id":"in-statement","chapter":"2 R Programming","heading":"2.2.3 %in% statement","text":"creates logical vector, testing element vector “” ever matches element vector “b”print elements list included given listWe can negate logical statement","code":"\n## lets create a sequence\na = seq_len(10)\n\n## test which elements of a is included in the list\na %in% c(2, 4, 6, 8, 0)##  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\na[a %in% c(2, 4, 6, 8, 0)]## [1] 2 4 6 8\n# sub-setting property\n\na[ ! (a %in% c(2, 4, 6, 8, 0))]## [1]  1  3  5  7  9 10"},{"path":"r-programming.html","id":"which-function","chapter":"2 R Programming","heading":"2.2.4 which() function","text":"(x, arr.ind = FALSE, useNames = TRUE)x: input logical statementvector returns location index true valuesHere, function returns indices list element greater 3Let’s define two character vectors.shows whether element vector d matches element vector eAnd locations TRUE values vector d (matches vector e)","code":"\nwhich(a > 3)## [1]  4  5  6  7  8  9 10\nd <- LETTERS[1:10]\nd##  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\ne <- LETTERS[7:10]\ne## [1] \"G\" \"H\" \"I\" \"J\"\nd %in% e##  [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\nwhich(d %in% e)   ## [1]  7  8  9 10\narray1 = 1:12\n\nwhich( array1 %% 2 == 0, arr.ind = F)   ## location in the array (1:12)## [1]  2  4  6  8 10 12"},{"path":"r-programming.html","id":"where-is-the-min-max-first-truefalse","chapter":"2 R Programming","heading":"2.2.5 Where is the min, max, first true/false?","text":".min()\n.max()input logical vector, max indicate first TRUE, min indicate first FALSE.","code":"\n# Here is the list\na = c(2, 4, 1, 7, 9, 1, 3, 5, 9, NA, \"4\")\n\n## print the location of the min element \nwhich.min(a)## [1] 3\n## print the min element itself\na[which.min(a)]## [1] \"1\"\n## print the location of the min element \nwhich.max(a)## [1] 5\n## print the min element itself\na[which.max(a)]## [1] \"9\"\nwhich.max(a > 3) ## the second element## [1] 2\n## print the second element\na[which.max(a > 3)]## [1] \"4\""},{"path":"r-programming.html","id":"matcha-b-function","chapter":"2 R Programming","heading":"2.2.6 match(a, b) function","text":"match: integer vector giving position table first match match, otherwise nomatch.","code":"\na = 1:15\nb = seq(1, 20, by=3)\n\nmatch(a, b)  ## returns location of true values of vector a##  [1]  1 NA NA  2 NA NA  3 NA NA  4 NA NA  5 NA NA\na %in% b##  [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE\n## [13]  TRUE FALSE FALSE"},{"path":"r-programming.html","id":"create-a-data-frame","chapter":"2 R Programming","heading":"2.3 Create a Data Frame","text":"multiple options tools .data frametibbledata tablesubsettingdropping columnsselecting columnscreating custom operator","code":"\ndf <- cars\nhead(df)##   speed dist\n## 1     4    2\n## 2     4   10\n## 3     7    4\n## 4     7   22\n## 5     8   16\n## 6     9   10\n# test if value 5 in speed column\n5 %in% df$speed## [1] FALSE\n# create a dataframe\ndf2 <- data.frame(Type = c(\"fruit\", \"fruit\",\"fruit\", \"veggie\",\"veggie\"),\n                  Name = c(\"red apple\", \"green apple\", \"red apple\", \"green apple\" ,\"red apple\"), Color = c(NA, \"red\", \"blue\", \"yellow\", \"red\"))\n\ndf2##     Type        Name  Color\n## 1  fruit   red apple   <NA>\n## 2  fruit green apple    red\n## 3  fruit   red apple   blue\n## 4 veggie green apple yellow\n## 5 veggie   red apple    red\ndf2 <- within(df2, \n              { newcol = \"No\"\n              newcol[Type %in% c(\"fruit\")] = \"No\"\n              newcol[Name %in% c( \"green apple\")] = \"Yes\"\n})\n\nhead(df2, 3)##    Type        Name Color newcol\n## 1 fruit   red apple  <NA>     No\n## 2 fruit green apple   red    Yes\n## 3 fruit   red apple  blue     No\nlibrary(dplyr)## \n## Attaching package: 'dplyr'## The following objects are masked from 'package:stats':\n## \n##     filter, lag## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\ndf3 <- c(\"home\", \"veggie\", \"fruit\")\n\ndf2 %>%\n    filter(df2$Type %in% df3)##     Type        Name  Color newcol\n## 1  fruit   red apple   <NA>     No\n## 2  fruit green apple    red    Yes\n## 3  fruit   red apple   blue     No\n## 4 veggie green apple yellow    Yes\n## 5 veggie   red apple    red   <NA>\ndf2[, !(colnames(df2) %in% c(\"Name\", \"Color\")) ]##     Type newcol\n## 1  fruit     No\n## 2  fruit    Yes\n## 3  fruit     No\n## 4 veggie    Yes\n## 5 veggie   <NA>\ndf2[, (colnames(df2) %in% c(\"Name\", \"Color\")) ]##          Name  Color\n## 1   red apple   <NA>\n## 2 green apple    red\n## 3   red apple   blue\n## 4 green apple yellow\n## 5   red apple    red\n`%notin%` <- Negate(`%in%`)\n\nnumbs <- rep(seq(3), 4)\nnumbs##  [1] 1 2 3 1 2 3 1 2 3 1 2 3\n4 %notin% numbs## [1] TRUE"},{"path":"logic-statements.html","id":"logic-statements","chapter":"3 Logic statements","heading":"3 Logic statements","text":"TRUE vs FALSEequivalent statement ","code":"\nTRUE == TRUE## [1] TRUE\n(FALSE == TRUE) == FALSE## [1] TRUE\n6==7## [1] FALSE\n6<=6## [1] TRUE\n4 != 5## [1] TRUE\n!(5 == 71)## [1] TRUE\nTRUE & TRUE## [1] TRUE\nFALSE & FALSE## [1] FALSE\nTRUE & c(TRUE, FALSE, FALSE)## [1]  TRUE FALSE FALSE\nc(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)## [1]  TRUE FALSE FALSE"},{"path":"be-careful.html","id":"be-careful","chapter":"4 be careful","heading":"4 be careful","text":"case, left operand evaluated first member\nright operand (vector). rest elements \nvector aren’t evaluated expression.xor() function stands exclusive . one argument evaluates TRUE one argument evaluates FALSE, function return TRUE, otherwise return FALSE.() function takes logical vector argument returns indices vector TRUE.() function return TRUE one elements logical vector TRUE.() function return TRUE every element logical vector TRUE.","code":"\nTRUE && c(TRUE, FALSE, FALSE)## [1] TRUE\nTRUE | FALSE## [1] TRUE\nTRUE | c(TRUE, FALSE, FALSE)## [1] TRUE TRUE TRUE\nTRUE || c(TRUE, FALSE, FALSE)## [1] TRUE\nFALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5## [1] FALSE\n!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79## [1] TRUE\nTRUE && FALSE || 9 >= 4 && 3 < 6## [1] TRUE\n99.99 > 100 || 45 < 7.3 || 4 != 4.0## [1] FALSE\nisTRUE(6>4)## [1] TRUE\nidentical('twins', 'twins')## [1] TRUE\nxor(5 == 6, !FALSE)## [1] TRUE\nxor(T, T)## [1] FALSE\nxor(F, F)## [1] FALSE\nxor(identical(xor, 'xor'), 7 == 7.0)## [1] TRUE\nxor(4 >= 9, 8 != 8.0)## [1] FALSE\nints <- sample(10)\nints > 5##  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE\nwhich(c(TRUE, FALSE, TRUE))## [1] 1 3\nx <- ints>7\n\nwhich(x)## [1] 1 5 7\nany(ints<0)## [1] FALSE\nall(ints>0)## [1] TRUE\nany(ints == 10)## [1] TRUE\nall(c(TRUE, FALSE, TRUE))## [1] FALSE"},{"path":"be-careful.html","id":"matrices-and-data-frames","chapter":"4 be careful","heading":"4.1 matrices and data frames","text":"","code":""},{"path":"vectors-contain-one-class-of-data.html","id":"vectors-contain-one-class-of-data","chapter":"5 Vectors contain one class of data","heading":"5 Vectors contain one class of data","text":"","code":"\nnum1 <- 1:20\nnum1##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\ndim(num1)## NULL\nlength(num1)## [1] 20"},{"path":"convert-vector-to-a-matrix.html","id":"convert-vector-to-a-matrix","chapter":"6 Convert vector to a Matrix","heading":"6 Convert vector to a Matrix","text":"","code":"\ndim(num1) <- c(4, 5)\nattributes(num1)## $dim\n## [1] 4 5\nnum1##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\nclass(num1)## [1] \"matrix\" \"array\"\nmy_matrix <- num1"},{"path":"creating-a-matrix.html","id":"creating-a-matrix","chapter":"7 Creating a Matrix","heading":"7 Creating a Matrix","text":"","code":"\nmy_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)\nidentical(my_matrix, my_matrix2)## [1] TRUE"},{"path":"create-a-character-vector.html","id":"create-a-character-vector","chapter":"8 Create a character vector","heading":"8 Create a character vector","text":"","code":"\npatients <- c(\"Bill\", \"Gina\", \"Kelly\", \"Sean\")"},{"path":"column-bind.html","id":"column-bind","chapter":"9 column bind","heading":"9 column bind","text":"","code":"\nalt <- cbind(patients, my_matrix)\nalt##      patients                       \n## [1,] \"Bill\"   \"1\" \"5\" \"9\"  \"13\" \"17\"\n## [2,] \"Gina\"   \"2\" \"6\" \"10\" \"14\" \"18\"\n## [3,] \"Kelly\"  \"3\" \"7\" \"11\" \"15\" \"19\"\n## [4,] \"Sean\"   \"4\" \"8\" \"12\" \"16\" \"20\""},{"path":"r-recycles-if-columns-are-not-equal.html","id":"r-recycles-if-columns-are-not-equal","chapter":"10 R recycles if columns are not equal","heading":"10 R recycles if columns are not equal","text":"","code":"\nnum2 <- 1:10\nalt2 <- cbind(patients, num2)## Warning in cbind(patients, num2): number of rows of result is not a multiple of\n## vector length (arg 1)\nalt2##       patients num2\n##  [1,] \"Bill\"   \"1\" \n##  [2,] \"Gina\"   \"2\" \n##  [3,] \"Kelly\"  \"3\" \n##  [4,] \"Sean\"   \"4\" \n##  [5,] \"Bill\"   \"5\" \n##  [6,] \"Gina\"   \"6\" \n##  [7,] \"Kelly\"  \"7\" \n##  [8,] \"Sean\"   \"8\" \n##  [9,] \"Bill\"   \"9\" \n## [10,] \"Gina\"   \"10\"\ndf <- data.frame(patients, my_matrix)\n\ndf##   patients X1 X2 X3 X4 X5\n## 1     Bill  1  5  9 13 17\n## 2     Gina  2  6 10 14 18\n## 3    Kelly  3  7 11 15 19\n## 4     Sean  4  8 12 16 20\nclass(df)## [1] \"data.frame\""},{"path":"create-and-variable-names.html","id":"create-and-variable-names","chapter":"11 Create and ; variable names","heading":"11 Create and ; variable names","text":"","code":"\ncnames <- c(\"patient\", \"age\", \"weight\", \"bp\", \"rating\", \"test\")"},{"path":"assign-column-names.html","id":"assign-column-names","chapter":"12 assign column names","heading":"12 assign column names","text":"","code":"\ncolnames(df) <- cnames\nnames(df)## [1] \"patient\" \"age\"     \"weight\"  \"bp\"      \"rating\"  \"test\"\nnames(df) <- toupper(names(df))\n\nnames(df)## [1] \"PATIENT\" \"AGE\"     \"WEIGHT\"  \"BP\"      \"RATING\"  \"TEST\"\nnames(df) <- tolower(names(df))\n\nnames(df)## [1] \"patient\" \"age\"     \"weight\"  \"bp\"      \"rating\"  \"test\""},{"path":"reorder-the-variable-names.html","id":"reorder-the-variable-names","chapter":"13 reorder the variable names","heading":"13 reorder the variable names","text":"","code":"\ndf <- df[ , c(6:1)]\nnames(df)## [1] \"test\"    \"rating\"  \"bp\"      \"weight\"  \"age\"     \"patient\"\ncolnames(df)## [1] \"test\"    \"rating\"  \"bp\"      \"weight\"  \"age\"     \"patient\""},{"path":"reordering-columns.html","id":"reordering-columns","chapter":"14 Reordering columns","heading":"14 Reordering columns","text":"","code":"\ndf <- df[ , c( \"age\", \"test\", \"weight\", \"bp\", \"patient\", \"rating\")]\nnames(df)## [1] \"age\"     \"test\"    \"weight\"  \"bp\"      \"patient\" \"rating\""},{"path":"adding-a-new-column.html","id":"adding-a-new-column","chapter":"15 Adding a new column","heading":"15 Adding a new column","text":"","code":"\ndf$newcol <- as.Date(\"2020-05-20\")\n\ndf$newcol[1]## [1] \"2020-05-20\"\nversion##                _                           \n## platform       aarch64-apple-darwin20      \n## arch           aarch64                     \n## os             darwin20                    \n## system         aarch64, darwin20           \n## status                                     \n## major          4                           \n## minor          1.3                         \n## year           2022                        \n## month          03                          \n## day            10                          \n## svn rev        81868                       \n## language       R                           \n## version.string R version 4.1.3 (2022-03-10)\n## nickname       One Push-Up\nsessionInfo()## R version 4.1.3 (2022-03-10)\n## Platform: aarch64-apple-darwin20 (64-bit)\n## Running under: macOS Monterey 12.2.1\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib\n## LAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n## [1] dplyr_1.0.8\n## \n## loaded via a namespace (and not attached):\n##  [1] bslib_0.3.1      compiler_4.1.3   pillar_1.7.0     jquerylib_0.1.4 \n##  [5] tools_4.1.3      digest_0.6.29    downlit_0.4.0    jsonlite_1.8.0  \n##  [9] evaluate_0.15    memoise_2.0.1    lifecycle_1.0.1  tibble_3.1.6    \n## [13] pkgconfig_2.0.3  rlang_1.0.2      DBI_1.1.2        cli_3.3.0       \n## [17] rstudioapi_0.13  yaml_2.3.5       xfun_0.31        fastmap_1.1.0   \n## [21] stringr_1.4.0    xml2_1.3.3       knitr_1.39       generics_0.1.2  \n## [25] fs_1.5.2         vctrs_0.3.8      sass_0.4.1       tidyselect_1.1.2\n## [29] glue_1.6.2       R6_2.5.1         fansi_1.0.2      rmarkdown_2.14  \n## [33] bookdown_0.27.1  purrr_0.3.4      magrittr_2.0.3   htmltools_0.5.2 \n## [37] ellipsis_0.3.2   assertthat_0.2.1 utf8_1.2.2       stringi_1.7.6   \n## [41] cachem_1.0.6     crayon_1.5.0"},{"path":"operators.html","id":"operators","chapter":"16 operators","heading":"16 operators","text":"+, -,  exponentiation: ^ (**)\nmodulo operator: %% returns remainder division","code":""},{"path":"categorical-variables.html","id":"categorical-variables","chapter":"17 Categorical variables","heading":"17 Categorical variables","text":"nominal variables: represent data unorderedOrdinal variables: ordered, ranked dataIf dont specify, R alphateciallyIf specify:Grab component listThree ways select column","code":"\ncolors <- c(\"green\", \"blue\", \"yellow\")\nfactor(colors)## [1] green  blue   yellow\n## Levels: blue green yellow\nspeed <- c(\"low\", \"high\", \"med\", \"med\")\n\nfactor(speed, ordered = TRUE)## [1] low  high med  med \n## Levels: high < low < med\nspeed <- c(\"low\", \"high\", \"med\", \"med\")\n\nfactor(speed,\n       levels = c(\"low\", \"med\", \"high\"),\n       ordered = TRUE)## [1] low  high med  med \n## Levels: low < med < high\nmylist = list(A = c(\"a, b, d\"),\n              cinema = (\"stars\"),\n              size = c(1, 2, 3, 4, 4))\nmylist[[2]]## [1] \"stars\"\nmylist[[\"cinema\"]]## [1] \"stars\"\nmylist$cinema## [1] \"stars\""},{"path":"logical-values.html","id":"logical-values","chapter":"18 Logical Values","heading":"18 Logical Values","text":"exampleStandard Logical operations","code":"\nx=1 ; y=3 ; z= x > y\nprint(z)\nclass(z)## [1] \"logical\"\nu=TRUE; v=FALSE\nu & v     # u and v## [1] FALSE\nu | v     # u or v## [1] TRUE\n!u      # negation## [1] FALSE"},{"path":"integer-value.html","id":"integer-value","chapter":"19 Integer Value","heading":"19 Integer Value","text":"Using integer function (making integer)","code":"\ny = as.integer(42.5)  #forcing\nprint(y)## [1] 42\nclass(y)## [1] \"integer\""},{"path":"character-values.html","id":"character-values","chapter":"20 Character Values","heading":"20 Character Values","text":"chracter object string valueConcatenate two charactersCreate readable stringExtract substringvectors","code":"\nx= as.character(842)\ny= as.character(\"Davut\")\nprint(x)## [1] \"842\"\nprint(y)## [1] \"Davut\"\nclass(x)    # print class of x ## [1] \"character\"\nclass(y)## [1] \"character\"\nfirstname=\"Davut\"; lastname=\"Ayan\"\npaste(firstname, lastname)   # concatenate## [1] \"Davut Ayan\"\nsprintf(\"%s has %d dollars\", \"Davut\", 5000)## [1] \"Davut has 5000 dollars\"\nsubstr(\"Davut is a crazy person\", start=2, stop = 5)## [1] \"avut\""},{"path":"basics.html","id":"basics","chapter":"21 Basics","heading":"21 Basics","text":"creating vector (numeric, string, logical)","code":"\nx=c(1,4,TRUE, \"deneme\")\nprint(x)## [1] \"1\"      \"4\"      \"TRUE\"   \"deneme\"\nlength(x)   #number of members## [1] 4"}]
