any_string = "Life is good!"
any_string[5:6]
any_string = "Life is good!"
any_string[5:7]
any_string = "Life is good!"
any_string[5:7] = "was"
print("Life\tIs\tGood!")
print(
r"Life is good!"
)
l_string = "Ohh! my life!"
u_string = l_string.upper()
u_string
"Ohh! my life!".upper()
"Ohh! my life!".upper()
"OHH! MY LIFE!".lower()
"is it lowercase".islower()
"is it lowercase".islower()
"IS IT UPPERCASE".isupper()
#example
query = "
select all_columns
from my_table"
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = "select all_columns from my_table"
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = '''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = r'''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = '''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
print(new_query)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in 1:len(my_txt):
print(i)
my_txt = "life is good!"
for i in 1:len(my_txt):
print(i)
my_txt = "life is good!"
for i in 0:len(my_txt):
print(i)
my_txt = "life is good!"
for i in range(my_txt):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
print("good" in my_text)
my_txt = "life is good!"
print("good" in my_txt)
"s".capitalize()
"star".capitalize()
if "good" in my_txt:
print(my_txt)
my_txt = "life is good!"
print("good" in my_txt)
if "good" in my_txt:
print(my_txt)
if "good" in my_txt:
print(my_txt)
if "good" in my_txt:
print(my_txt)
if "bad" not in my_txt:
print("bad is not in the text")
if "bad" not in my_txt:
print("bad is not in the text")
if "bad" not in my_txt:
print("'bad' is not in the text")
if "bad" not in my_txt:
print("'bad' is not in the text")
raw_text = "   my text   "
print(raw_text.strip())
raw_text = "   my text   "
print(raw_text.strip())
raw_text = "   my text   "
raw_text.strip()
raw_text = "   my text   "
raw_text.strip()
raw_text = "banana, apple, cherry"
raw_text.split(",")
raw_text = "banana, apple, cherry"
raw_text.split(",").strip()
raw_text = "banana, apple, cherry"
raw_text.split(",")
raw_text = "banana, apple, cherry"
alist = raw_text.split(",")
alist
alist[1]
alist[1].strip()
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
a_tuple = (1, 2, 3)
b_tuple = ("a", "ab")
a_tuple + b_tuple
a_tuple[:2]
len(a_tuple)
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
b_tuple = ("a", "ab")
a_tuple + b_tuple
b_tuple = ("a", "ab")
a_tuple + b_tuple
a_tuple[:2]
len(a_tuple)
a_tuple = (1,2,3,4,5)
a_tuple[5] = "a"
a_tuple = (1,2,3,4,5)
a_tuple[5] = "a"
# output: TypeError: 'tuple' object does not support item assignment
a_tuple = (1, 5, 2, 7, 4)
a_tuple.sort()
a_tuple = (1, 5, 2, 7, 4)
a_tuple.sorted()
a_tuple = (1, 5, 2, 7, 4)
sorted()
a_tuple = (1, 5, 2, 7, 4)
sorted(a_tuple)
a_tuple = (1, 5, 2, 7, 4)
type(sorted(a_tuple))
nested = (1, 2, ("a", "b", "c"), ("ayan", (4, 5)))
nested[2]
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
## 2. way -- no parenthesis
b_tuple = a, b
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
## 2. way -- no parenthesis
b_tuple = a, b
b_tuple = a, b
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
b = (1,)
b
a = ("a", "b", "c", "d")
a.index("b")
a = ("a", "b", "c", "d", "a", "b", "c", "d")
a.count("b")
a = ("a", "b", "c", "d", "a", "b", "c", "d")
for item in a:
print(item)
a = ("a", "b", "c", "d", "a", "b", "c", "d")
for item in a:
print(item)
install.packages("learnr")
x=1 ; y=3 ; z= x > y
print(z)
which(c)
a %in% c(2, 4, 6, 8, 0)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
wd <- getwd()
wd
ls()
files <- list.files()
head(files)
files2 <- dir()
head(files2)
args(dir)
dir(pattern = "^R_", full.names = F, ignore.case = T )
old.dir <- getwd()
dir.create("testdir")
file.create("testdir/mytest.R")
file.info("testdir/mytest.R")
# to list files in path
myfiles <- list.files(path="testdir",
pattern = "[2]")
head(myfiles)
#rename filename from to
file.rename("testdir/mytest.R", "testdir/mytest4.R")
list.files(path="testdir", pattern = "[4]")
myfiles[1]
setwd("testdir")
file.copy(myfiles[1], "new_file.R")
a <- seq(from = 5, to = 14, by = 2)
a
seq(10, 20)
seq(10, 30, by =2)
seq(along.with = 1:12)
# alternative way
seq_along(1:15)
seq(length.out = 4)
seq_len(10)
seq(10)
a %in% c(2, 4, 6, 8, 0)
which(c)
d <- LETTERS[1:10]
d
e <- LETTERS[5:10]
e
d %in% e
x=1 ; y=3 ; z= x > y
print(z)
detach(ggplot2, unload = TRUE)
args(dir)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("testdir/mytest.R")
file.exists("testdir/mytest.R")
file.exists("testdir/mytest.R")
### Sample usage
if(!file.exists("testdir/mytest.R")){
print("File not exist!")}
else{"File exists!"}
file.exists("testdir/mytest.R")
### Sample usage
if(!file.exists("testdir/mytest.R")){
print("File not exist!")} else {
"File exists!"}
args(list.files)
myfiles <- list.files(path="testdir",
pattern = "[2]")
head(myfiles)
myfiles <- list.files(path="testdir",
pattern = "^my")
head(myfiles)
args(file.rename)
file.rename("testdir/mytest.R", "testdir/mytest10.R")
list.files(path="testdir", pattern = "[10]")
file.rename("testdir/mytest.R", "testdir/mytest10.R")
file.rename("testdir/mytest.R", "testdir/mytest10.R")
# interactive
file1 <- file.choose()
class("testdir/mytest10.R")   # character vector
myfiles <- list.files(path="testdir",
pattern = "^my")
myfiles[2]
